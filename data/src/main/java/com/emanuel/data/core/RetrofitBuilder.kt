package com.emanuel.data.core

import android.content.Context
import android.util.Log
import ir.logicbase.mockfit.MockFitInterceptor
import java.util.concurrent.TimeUnit
import okhttp3.OkHttpClient
import retrofit2.Retrofit
import retrofit2.converter.gson.GsonConverterFactory

class RetrofitBuilder(private val context: Context) {

    private fun createRetrofitBuilder(): Retrofit {
        val mockFitInterceptor = provideMockFitInterceptor(context)
        val okHttpClientBuilder = OkHttpClient.Builder()
            .connectTimeout(30, TimeUnit.SECONDS)
            .readTimeout(30, TimeUnit.SECONDS)
            .writeTimeout(60, TimeUnit.SECONDS)
        okHttpClientBuilder.addInterceptor(mockFitInterceptor)
        return Retrofit.Builder()
            .baseUrl("http://www.UNAURLBASE.com/")
            .addConverterFactory(GsonConverterFactory.create())
            .client(okHttpClientBuilder.build())
            .build()


    }

    private fun provideMockFitInterceptor(context: Context) = MockFitInterceptor(
        bodyFactory = { input -> context.resources.assets.open(input) },
        logger = { tag, message -> Log.d(tag, message) },
        baseUrl = "http://www.UNAURLBASE.com/",
        requestPathToJsonMap = mapOf(), // REQUEST_TO_JSON, add this autogenerated constant, just press build button
        mockFilesPath = MOCK_FILES_PATH,
        mockFitEnable = true,
        apiEnableMock = true,
        apiIncludeIntoMock = arrayOf(),
        apiExcludeFromMock = arrayOf(),
        apiResponseLatency = 500L
    )

    fun <T> createService(serviceClass: Class<T>): T {
        return createRetrofitBuilder().create(serviceClass)
    }
    private val MOCK_FILES_PATH = "mock_services"

}
